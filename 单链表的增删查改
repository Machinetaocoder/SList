#include "SList.h"
#include "assert.h"

SLTNode* BuyListNode(SLTDateType x)
{
	SLTNode* newnode = (SLTNode*)malloc(sizeof(SLTNode));//新建一个节点
	newnode->data = x;
	newnode->next = NULL;
	return newnode;
}
//单链表打印
void SListPrint(SLTNode* phead)
{
	SLTNode* cur = phead;
	while (cur)
	{
		printf("%d->", cur->data);
		cur = cur->next;	
	}
}
//单链表尾插
void SListPushBack(SLTNode** pphead, SLTDateType x)
{
	SLTNode* newnode = BuyListNode(x);

	if (*pphead == NULL)
	{
		*pphead = newnode;
	}
	else
	{
	    SLTNode* tail = *pphead;
		while (tail->next)
		{
			tail = tail->next;
		}
		tail->next = newnode;
	}
}
//单链表头插
void SListPushFront(SLTNode** pphead, SLTDateType x)
{
	SLTNode* newnode = BuyListNode(x);

	newnode->next = *pphead;
	*pphead = newnode;

}
//单链表的尾删
void SListPopBack(SLTNode** pphead)
{
	//温柔的方式
	/*if (*pphead == NULL)
	{
		return 0;
	}*/
	//粗暴的方式
	assert(pphead);

	if ((*pphead)->next == NULL)
	{
		free(*pphead);
		*pphead = NULL;
	}
	else
	{
	SLTNode* tail = *pphead;
		SLTNode* prev = NULL;
		while (tail->next)
		{
			prev = tail;
			tail = tail->next;
		}
		free(tail);
		tail = NULL;
		prev->next = NULL;
	}
	
}
//单链表的头删
void SListPopFront(SLTNode** pphead)
{
	assert(pphead!=NULL);
	SLTNode* next = (*pphead)->next;
	free(*pphead);
	*pphead=next;
}
//查找
SLTNode* SListNodeFind(SLTNode* phead, SLTDateType x)
{
	SLTNode* cur = phead;
	while (cur)
	{
		if (cur->data == x)
		{
			return cur;
		}
		else
		{
			cur = cur->next;
		}
	}
	return NULL;
}
//插入
void SListInsert(SLTNode** pphead, SLTNode* pos, SLTDateType x)
{
	SLTNode* newnode = BuyListNode(x);
	if (*pphead == pos)     //头插
	{
		newnode->next = *pphead;
		*pphead = newnode;
	}
	else
	{
		//找到pos的前一个位置
		SLTNode* posPrev = *pphead;
		while (posPrev->next != pos)
		{
			posPrev = pos->next;
		}
		posPrev->next = newnode;
		newnode->next = pos;

		newnode->next = *pphead;
		*pphead = newnode;
	}
}

void SListInsertAfter(SLTNode* pos, SLTDateType x)
{
	SLTNode* newnode = BuyListNode(x);
	newnode->next = pos->next;
	pos->next = newnode;
}
//擦除
void SListErase(SLTNode** pphead, SLTNode* pos)
{
	if (*pphead == pos)
	{
		/**pphead = pos->next;
		free(pos);*/
		SListPopFront(pphead);
	}
	else
	{
		SLTNode* posPrev = *pphead;
		while (posPrev->next != pos)
		{
			posPrev = pos->next;
		}
		posPrev->next = pos->next;
		free(pos);
	}

}
void SListEraseAfter(SLTNode** pphead, SLTNode* pos)
{
	assert(*pphead);
	SLTNode* next = pos->next;
	pos->next = next->next;
	free(next);
	next = NULL;
}
//销毁
void SListDestory(SLTNode** pphead)
{
	assert(*pphead);
	SLTNode* cur = *pphead;
	while (cur)
	{
		free(cur);
	}
}
